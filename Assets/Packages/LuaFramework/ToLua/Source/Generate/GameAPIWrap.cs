//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameAPIWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("GameAPI");
		L.RegFunction("RegisterEvent", RegisterEvent);
		L.RegFunction("UnregisterEvent", UnregisterEvent);
		L.RegFunction("ExecuteEvent", ExecuteEvent);
		L.RegFunction("StartMultiplayer", StartMultiplayer);
		L.RegVar("Win", get_Win, set_Win);
		L.RegVar("RequestLevel", get_RequestLevel, set_RequestLevel);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			vp_GlobalCallback arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (vp_GlobalCallback)ToLua.CheckObject(L, 2, typeof(vp_GlobalCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(vp_GlobalCallback), func) as vp_GlobalCallback;
			}

			GameAPI.RegisterEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnregisterEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			vp_GlobalCallback arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (vp_GlobalCallback)ToLua.CheckObject(L, 2, typeof(vp_GlobalCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(vp_GlobalCallback), func) as vp_GlobalCallback;
			}

			GameAPI.UnregisterEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExecuteEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			GameAPI.ExecuteEvent(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartMultiplayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MultiplayerInfo arg0 = (MultiplayerInfo)ToLua.CheckObject(L, 1, typeof(MultiplayerInfo));
			GameAPI.StartMultiplayer(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Win(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameAPI.Win);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RequestLevel(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameAPI.RequestLevel);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Win(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameAPI.Win = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RequestLevel(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameAPI.RequestLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

